#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define SIZE 5

void generateKeyMatrix(char key[], char keyMatrix[SIZE][SIZE]) {
    int map[26] = {0};
    int i, j, k, len = strlen(key);
    int row = 0, col = 0;
    
    for (i = 0; i < len; i++) {
        if (key[i] == 'j') key[i] = 'i';
        if (!map[key[i] - 'a']) {
            map[key[i] - 'a'] = 1;
            keyMatrix[row][col++] = key[i];
            if (col == SIZE) {
                col = 0;
                row++;
            }
        }
    }

    for (i = 0; i < 26; i++) {
        if (i == ('j' - 'a')) continue;
        if (!map[i]) {
            keyMatrix[row][col++] = i + 'a';
            if (col == SIZE) {
                col = 0;
                row++;
            }
        }
    }
}

void preprocessText(char text[], char preprocessedText[]) {
    int len = strlen(text);
    int i, j = 0;

    for (i = 0; i < len; i++) {
        if (isalpha(text[i])) {
            preprocessedText[j++] = tolower(text[i] == 'j' ? 'i' : text[i]);
        }
    }
    preprocessedText[j] = '\0';
}

void createDigraphs(char text[], char digraphs[][2], int *numDigraphs) {
    int len = strlen(text);
    int i, j = 0;

    for (i = 0; i < len; i += 2) {
        digraphs[j][0] = text[i];
        if (i + 1 < len) {
            digraphs[j][1] = (text[i] == text[i + 1]) ? 'x' : text[i + 1];
        } else {
            digraphs[j][1] = 'x';
        }
        j++;
    }
    *numDigraphs = j;
}

void findPosition(char keyMatrix[SIZE][SIZE], char c, int *row, int *col) {
    int i, j;

    for (i = 0; i < SIZE; i++) {
        for (j = 0; j < SIZE; j++) {
            if (keyMatrix[i][j] == c) {
                *row = i;
                *col = j;
                return;
            }
        }
    }
}

void encryptDigraph(char keyMatrix[SIZE][SIZE], char digraph[2], char encryptedDigraph[2]) {
    int row1, col1, row2, col2;

    findPosition(keyMatrix, digraph[0], &row1, &col1);
    findPosition(keyMatrix, digraph[1], &row2, &col2);

    if (row1 == row2) {
        encryptedDigraph[0] = keyMatrix[row1][(col1 + 1) % SIZE];
        encryptedDigraph[1] = keyMatrix[row2][(col2 + 1) % SIZE];
    } else if (col1 == col2) {
        encryptedDigraph[0] = keyMatrix[(row1 + 1) % SIZE][col1];
        encryptedDigraph[1] = keyMatrix[(row2 + 1) % SIZE][col2];
    } else {
        encryptedDigraph[0] = keyMatrix[row1][col2];
        encryptedDigraph[1] = keyMatrix[row2][col1];
    }
}

void encrypt(char plaintext[], char key[], char ciphertext[]) {
    char keyMatrix[SIZE][SIZE];
    char preprocessedText[100];
    char digraphs[50][2];
    char encryptedDigraph[2];
    int numDigraphs, i, j;

    preprocessText(plaintext, preprocessedText);
    generateKeyMatrix(key, keyMatrix);
    createDigraphs(preprocessedText, digraphs, &numDigraphs);

    j = 0;
    for (i = 0; i < numDigraphs; i++) {
        encryptDigraph(keyMatrix, digraphs[i], encryptedDigraph);
        ciphertext[j++] = encryptedDigraph[0];
        ciphertext[j++] = encryptedDigraph[1];
    }
    ciphertext[j] = '\0';
}

int main() {
    char plaintext[100], key[100], ciphertext[100];

    printf("Enter the plaintext: ");
    fgets(plaintext, sizeof(plaintext), stdin);
    plaintext[strcspn(plaintext, "\n")] = '\0';

    printf("Enter the key: ");
    fgets(key, sizeof(key), stdin);
    key[strcspn(key, "\n")] = '\0';

    encrypt(plaintext, key, ciphertext);

    printf("Ciphertext: %s\n", ciphertext);

    return 0;
}
OUTPUT:
enter the plaintext:crptography
enter the key:rare
ciphertext:trptkoxvrpp
